* task1:

Java	задача:

Требуется	написать	Java	программу	которая	соответсвует	следующим
требованиям:

1. С	команднои	строки	пользователь	может	запустить	программу	и	передать
аргументом	URL	какой	либо	страницы	на	интернете.
2. Принимаются	только	HTTP://	URL.	В	случае	если	пользователь	ввел	какой
либо	другой	URL,	программа	должна	репортировать	ошибку.
3. Программа	должна	убедится	что	вернувшаяся	страница	имеет	именно	HTML
содержание.	Если	нет,	то	необходимо	вывести	ошибку	в	формате:
«Данный	URL	–	http://хххххх	-	не	содержит	HTML	содержания»,	где
'http://xxxxx’	должен	быть	предоставленный	адрес.
4. Для	загруженной	страницы	программа	должна	предоставить	следующий
отчет:
3а.	общее	количество	слов
3б.	Отсортированный	список	слов	с	числом	повторений	каждого	из	слов	на
странице.
5. «Слова»	и	символы	которые	содержат	цифры	или	знаки	пунктуации	следует
игнорировать.
6. Основным	признаком	разделения	слов	служат	следующие	символы:
пробел,	точка,	запятая,	точка	с	запятой,	тире	и	перенос	каретки.

Дополнительными	плюсами	в	Вашем	решении	и	алгоритме	будет	являтся
выполнение	следующих	условий	(это	не	является	необходимыми	требованиями,
но	при	включении	в	решение,	Вы	заработаете	дополнительные	«очки»).
• Слова	которые	являются	HTML	тэгами	следует	игнорировать.
• Следует	игнорировать	содержание	таких	тэгов	как	<style>,	<script>,	<image>,
<object>.

Решение	будет	оцениваться	по	следующим	критериям:
1. Оригинальность	решения
2. Скорость	выполнения	программы
3. Элегантность	в	решении
4. Использование	ООП
5. Читабельность	кода,	понятные	наименования	переменных	и	методов.
6. Отсутствие	зависимостей	от	внешних	библиотек.

Удачи!

Test URL's:

1. http://korrespondent.net
2. http://finance.ua
3. http://frolov-lib.ru/programming
4. http://translate.google.com
5. http://vk.com/feed


* task2:

В предложенной архитектуре след. ошибки:

     - понятие еды не разделено для хищников и травоядных, также как и Животные не разделены на таковых.
     Соотв., хищники не могут есть растительную еду, а травоядные не могут есть других животных.

Необходимо ввести два промежуточных абстрактных класса в иерархию Animal:

 - PredatorAnimal 		с методом   void eat(GrassEatingAnimal food);
 - GrassEatingAnimal 	с методом	void eat(Food food);

Концептуально это можно было бы решить с помощью 2-ух интерфейсов с соотв. методами,
    НО тогда по ошибке возможно в одном instance animal имплементировать сразу оба интерфейса,
     что по логике вещей не явл. верным.